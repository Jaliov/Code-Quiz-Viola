require("dotenv").config();var express=require("express"),app=express(),port=process.env.PORT||5e3,morgan=require("morgan");app.use(morgan("dev"));var bodyParser=require("body-parser");app.use(bodyParser.json()),app.use(bodyParser.urlencoded({extended:!0})),app.use("/public",express.static(__dirname+"/public")),app.use(express.static(__dirname+"public/stylesheets/style.css")),app.use(express.static(__dirname+"public/javascripts/script.js"));const{body:body,validationResult:validationResult}=require("express-validator");var mongoose=require("mongoose");const url=process.env.MONGODB_URI;mongoose.Promise=global.Promise,mongoose.connect("mongodb+srv://TestViola:vlaStunn93@cluster0.sils7.mongodb.net/test"),mongoose.connection.on("error",(err=>{console.log("err",err)})),mongoose.connection.on("connected",(()=>{console.log("Mongoose is connected!!!")}));var resultsSchema=new mongoose.Schema({initials:{type:String,match:/^[A-Za-z]{2,3}$/}}),scoreSchema=new mongoose.Schema({finalScore:Number}),Users1=mongoose.model("initials",resultsSchema);app.get("/",((req,res)=>{res.sendFile(__dirname+"/public/index.html")})),app.post("/initials",(async(req,res)=>{const{initials:initials}=req.body,user=new Users1({initials:initials});if(!validationResult(req).isEmpty())return res.status(400).send("<h4 style = 'font-family: Arial, Helvetica, sans-serif;'>No empty fields. Name should be more than 2 characters long<a href = 'form.html' class = 'button'><br>Back</a></h4>");await user.save(),console.log(user)}));var Users=mongoose.model("finalScore",scoreSchema);app.post("/finalScore",((req,res)=>{new Users(req.body).save().then((item=>{res.send('<body style="background-color:rgba(140, 94, 75);font-family:sans-serif;"><div style="text-align:center;color:white;"><h2 style ="padding-top:30px;">Final Score Saved!</h2> <a href = "/"><button style="border-radius:15px;background-color:rgba(220, 53, 69);color:white;"><h2>Back to Quiz</h2></button></a></div></body>'),console.log(req.body)})).catch((err=>{res.status(400).send("unable to save to database")}))})),app.listen(port,(()=>console.log(`Listening port ${port}....`)));